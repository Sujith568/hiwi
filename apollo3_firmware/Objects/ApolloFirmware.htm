<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ApolloFirmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ApolloFirmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Apr  8 11:29:08 2024
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; executeSpecMeasurement &rArr; SpectrometerMeasurement &rArr; as7341_transmitMeasurementsFIFO &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">am_ble_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">am_ble_isr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from am_util_faultisr.o(.text.HardFault_Handler) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[2b]">__main</a> from __main.o(!!!main) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1d]">am_adc_isr</a> from adc.o(.text.am_adc_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[17]">am_ble_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[b]">am_brownout_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[2a]">am_clkgen_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[19]">am_ctimer_isr</a> from timing.o(.text.am_ctimer_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[18]">am_gpio_isr</a> from gpio.o(.text.am_gpio_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[11]">am_iomaster0_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[12]">am_iomaster1_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[13]">am_iomaster2_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[14]">am_iomaster3_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[15]">am_iomaster4_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[16]">am_iomaster5_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[10]">am_ioslave_acc_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[f]">am_ioslave_ios_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1f]">am_mspi0_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1e]">am_pdm0_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[d]">am_rtc_isr</a> from rtc.o(.text.am_rtc_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1c]">am_scard_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[20]">am_software0_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[22]">am_stimer_cmpr0_isr</a> from timing.o(.text.am_stimer_cmpr0_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[23]">am_stimer_cmpr1_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[24]">am_stimer_cmpr2_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[25]">am_stimer_cmpr3_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[26]">am_stimer_cmpr4_isr</a> from timing.o(.text.am_stimer_cmpr4_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[27]">am_stimer_cmpr5_isr</a> from timing.o(.text.am_stimer_cmpr5_isr) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[28]">am_stimer_cmpr6_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[29]">am_stimer_cmpr7_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[21]">am_stimer_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1b]">am_uart1_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[1a]">am_uart_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[e]">am_vcomp_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[c]">am_watchdog_isr</a> from startup_apollo3.o(RESET) referenced from startup_apollo3.o(RESET)
 <LI><a href="#[2c]">as7341IRQ</a> from as7341.o(.text.as7341IRQ) referenced 2 times from taskhandler.o(.text.initSpecMeasurement)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>am_ble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ble_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ble_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>am_clkgen_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>am_iomaster2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>am_iomaster3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>am_iomaster4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>am_iomaster5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>am_mspi0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>am_pdm0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>am_scard_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>am_software0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>am_stimer_cmpr1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>am_stimer_cmpr2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>am_stimer_cmpr3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>am_stimer_cmpr6_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>am_stimer_cmpr7_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>am_stimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>am_uart0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1b]"></a>am_uart1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>am_uart_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apollo3.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[37]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[32]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ac]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[af]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[be]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[34]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[38]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; executeSpecMeasurement &rArr; SpectrometerMeasurement &rArr; as7341_transmitMeasurementsFIFO &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[40]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_apollo3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_util_faultisr.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HardFault_Handler &rArr; am_util_faultisr_collect_data &rArr; am_hal_mcuctrl_info_get &rArr; mcuctrl_fault_status
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SHTC3_GetTempAndHumi</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, shtc3.o(.text.SHTC3_GetTempAndHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SHTC3_GetTempAndHumi &rArr; SHTC3_ReadBytesAndCrc &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_CalcHumidity
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_CalcTemperature
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_ReadBytesAndCrc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeTempMeasurement
</UL>

<P><STRONG><a name="[1d]"></a>am_adc_isr</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, adc.o(.text.am_adc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_adc_isr &rArr; am_hal_adc_interrupt_status
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_interrupt_clear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_interrupt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>am_ctimer_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timing.o(.text.am_ctimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_ctimer_isr &rArr; am_hal_ctimer_int_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>am_device_command_read</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, i2c.o(.text.am_device_command_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_ReadBytesAndCrc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_testCommunication
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_transmitMeasurementsFIFO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setInterruptMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_readRegister
</UL>

<P><STRONG><a name="[45]"></a>am_device_command_write</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, i2c.o(.text.am_device_command_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_GetTempAndHumi
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_dac63002_1_set_output
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_stopMeasuring
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setGain
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setIntegrationTime
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setInterruptMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setWaitTime
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_startMeasurement
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_writeSMUXmapping
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_clearInterrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_enable
</UL>

<P><STRONG><a name="[56]"></a>am_devices_dac63002_1_set_output</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, dac63002.o(.text.am_devices_dac63002_1_set_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = am_devices_dac63002_1_set_output &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataPrepare
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr5_isr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr0_isr
</UL>

<P><STRONG><a name="[18]"></a>am_gpio_isr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gpio.o(.text.am_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = am_gpio_isr &rArr; am_hal_gpio_interrupt_service
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_service
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>am_hal_adc_interrupt_clear</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, am_hal_adc.o(.text.am_hal_adc_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_adc_interrupt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>

<P><STRONG><a name="[52]"></a>am_hal_adc_interrupt_status</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, am_hal_adc.o(.text.am_hal_adc_interrupt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_adc_interrupt_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>

<P><STRONG><a name="[5b]"></a>am_hal_cachectrl_control</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, am_hal_cachectrl.o(.text.am_hal_cachectrl_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = am_hal_cachectrl_control &rArr; set_RDWAIT &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RDWAIT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SEDELAY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LPMMODE
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[61]"></a>am_hal_clkgen_control</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, am_hal_clkgen.o(.text.am_hal_clkgen_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_clkgen_control &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>am_hal_clkgen_status_get</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, am_hal_clkgen.o(.text.am_hal_clkgen_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_clkgen_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>

<P><STRONG><a name="[69]"></a>am_hal_cmdq_disable</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, am_hal_cmdq.o(.text.am_hal_cmdq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_cmdq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_CQDisable
</UL>

<P><STRONG><a name="[6b]"></a>am_hal_cmdq_enable</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, am_hal_cmdq.o(.text.am_hal_cmdq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_cmdq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_CQEnable
</UL>

<P><STRONG><a name="[6d]"></a>am_hal_cmdq_init</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, am_hal_cmdq.o(.text.am_hal_cmdq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_hal_cmdq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_CQInit
</UL>

<P><STRONG><a name="[54]"></a>am_hal_ctimer_int_clear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, am_hal_ctimer.o(.text.am_hal_ctimer_int_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_int_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ctimer_isr
</UL>

<P><STRONG><a name="[62]"></a>am_hal_flash_delay</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, am_hal_flash.o(.text.am_hal_flash_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_reset_on_error
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_check
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_control
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>

<P><STRONG><a name="[63]"></a>am_hal_flash_delay_status_check</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, am_hal_flash.o(.text.am_hal_flash_delay_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_flash_delay_status_check &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[a4]"></a>am_hal_flash_load_ui32</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, am_hal_flash.o(.text.am_hal_flash_load_ui32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RDWAIT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SEDELAY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LPMMODE
</UL>

<P><STRONG><a name="[a5]"></a>am_hal_flash_store_ui32</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, am_hal_flash.o(.text.am_hal_flash_store_ui32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_flash_store_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RDWAIT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SEDELAY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LPMMODE
</UL>

<P><STRONG><a name="[5a]"></a>am_hal_gpio_interrupt_clear</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, am_hal_gpio.o(.text.am_hal_gpio_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_gpio_interrupt_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[64]"></a>am_hal_gpio_interrupt_enable</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, am_hal_gpio.o(.text.am_hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
</UL>

<P><STRONG><a name="[9e]"></a>am_hal_gpio_interrupt_register</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, am_hal_gpio.o(.text.am_hal_gpio_interrupt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_gpio_interrupt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
</UL>

<P><STRONG><a name="[59]"></a>am_hal_gpio_interrupt_service</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, am_hal_gpio.o(.text.am_hal_gpio_interrupt_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_hal_gpio_interrupt_service
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[58]"></a>am_hal_gpio_interrupt_status_get</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, am_hal_gpio.o(.text.am_hal_gpio_interrupt_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_gpio_interrupt_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[65]"></a>am_hal_gpio_pinconfig</STRONG> (Thumb, 964 bytes, Stack size 96 bytes, am_hal_gpio.o(.text.am_hal_gpio_pinconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_hal_gpio_pinconfig &rArr; pincfg_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pincfg_equ
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnTemp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnPARLAI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnI2C
</UL>

<P><STRONG><a name="[67]"></a>am_hal_gpio_state_write</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, am_hal_gpio.o(.text.am_hal_gpio_state_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioWrite
</UL>

<P><STRONG><a name="[5c]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.text.am_hal_interrupt_master_disable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_blebuck_trim
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_control
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RDWAIT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SEDELAY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LPMMODE
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_compare_delta_set
</UL>

<P><STRONG><a name="[9f]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.text.am_hal_interrupt_master_enable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
</UL>

<P><STRONG><a name="[5d]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.text.am_hal_interrupt_master_set))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_blebuck_trim
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_control
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RDWAIT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SEDELAY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LPMMODE
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_compare_delta_set
</UL>

<P><STRONG><a name="[68]"></a>am_hal_iom_CQDisable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, am_hal_iom.o(.text.am_hal_iom_CQDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = am_hal_iom_CQDisable &rArr; am_hal_cmdq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[6a]"></a>am_hal_iom_CQEnable</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, am_hal_iom.o(.text.am_hal_iom_CQEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_hal_iom_CQEnable &rArr; am_hal_cmdq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[6c]"></a>am_hal_iom_CQInit</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, am_hal_iom.o(.text.am_hal_iom_CQInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = am_hal_iom_CQInit &rArr; am_hal_cmdq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
</UL>

<P><STRONG><a name="[55]"></a>am_hal_iom_blocking_transfer</STRONG> (Thumb, 1290 bytes, Stack size 120 bytes, am_hal_iom.o(.text.am_hal_iom_blocking_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_transaction
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_get_int_err
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_reset_on_error
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_check
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_read
</UL>

<P><STRONG><a name="[72]"></a>am_hal_iom_configure</STRONG> (Thumb, 594 bytes, Stack size 48 bytes, am_hal_iom.o(.text.am_hal_iom_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am_hal_iom_configure &rArr; iom_get_interface_clock_cfg &rArr; compute_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_get_interface_clock_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>

<P><STRONG><a name="[74]"></a>am_hal_iom_enable</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, am_hal_iom.o(.text.am_hal_iom_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = am_hal_iom_enable &rArr; am_hal_iom_CQInit &rArr; am_hal_cmdq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_CQInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>

<P><STRONG><a name="[94]"></a>am_hal_iom_initialize</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, am_hal_iom.o(.text.am_hal_iom_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_iom_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>

<P><STRONG><a name="[76]"></a>am_hal_iom_power_ctrl</STRONG> (Thumb, 874 bytes, Stack size 32 bytes, am_hal_iom.o(.text.am_hal_iom_power_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = am_hal_iom_power_ctrl &rArr; am_hal_pwrctrl_periph_enable &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_CQDisable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_CQEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>

<P><STRONG><a name="[79]"></a>am_hal_mcuctrl_control</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, am_hal_mcuctrl.o(.text.am_hal_mcuctrl_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_hal_mcuctrl_control
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>

<P><STRONG><a name="[7a]"></a>am_hal_mcuctrl_info_get</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, am_hal_mcuctrl.o(.text.am_hal_mcuctrl_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_mcuctrl_info_get &rArr; mcuctrl_fault_status
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcuctrl_fault_status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[7d]"></a>am_hal_pwrctrl_blebuck_trim</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_blebuck_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_pwrctrl_blebuck_trim
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[7e]"></a>am_hal_pwrctrl_low_power_init</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = am_hal_pwrctrl_low_power_init &rArr; am_hal_cachectrl_control &rArr; set_RDWAIT &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_blebuck_trim
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simobuck_updates
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_check
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>am_hal_pwrctrl_periph_disable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_periph_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_pwrctrl_periph_disable &rArr; pwrctrl_periph_disable_msk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrctrl_periph_disable_msk_check
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[77]"></a>am_hal_pwrctrl_periph_enable</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_periph_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_pwrctrl_periph_enable &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[83]"></a>am_hal_rtc_int_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, am_hal_rtc.o(.text.am_hal_rtc_int_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_rtc_int_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_rtc_isr
</UL>

<P><STRONG><a name="[82]"></a>am_hal_rtc_int_status_get</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, am_hal_rtc.o(.text.am_hal_rtc_int_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_rtc_int_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_rtc_isr
</UL>

<P><STRONG><a name="[a3]"></a>am_hal_rtc_osc_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_rtc.o(.text.am_hal_rtc_osc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>am_hal_stimer_compare_delta_set</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, am_hal_stimer.o(.text.am_hal_stimer_compare_delta_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_stimer_compare_delta_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr0_isr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[a7]"></a>am_hal_stimer_config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, am_hal_stimer.o(.text.am_hal_stimer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_stimer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[84]"></a>am_hal_stimer_int_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, am_hal_stimer.o(.text.am_hal_stimer_int_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_stimer_int_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr5_isr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr4_isr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr0_isr
</UL>

<P><STRONG><a name="[86]"></a>am_hal_stimer_int_disable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, am_hal_stimer.o(.text.am_hal_stimer_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_stimer_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr5_isr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[a6]"></a>am_hal_stimer_int_enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, am_hal_stimer.o(.text.am_hal_stimer_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_stimer_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[4e]"></a>am_hal_sysctrl_sleep</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, am_hal_sysctrl.o(.text.am_hal_sysctrl_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = am_hal_sysctrl_sleep &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[d]"></a>am_rtc_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text.am_rtc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_rtc_isr &rArr; am_hal_rtc_int_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_int_status_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>am_stimer_cmpr0_isr</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timing.o(.text.am_stimer_cmpr0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = am_stimer_cmpr0_isr &rArr; am_devices_dac63002_1_set_output &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_dac63002_1_set_output
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_int_clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_compare_delta_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>am_stimer_cmpr4_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timing.o(.text.am_stimer_cmpr4_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_stimer_cmpr4_isr &rArr; am_hal_stimer_int_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>am_stimer_cmpr5_isr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timing.o(.text.am_stimer_cmpr5_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = am_stimer_cmpr5_isr &rArr; am_devices_dac63002_1_set_output &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_dac63002_1_set_output
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_int_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apollo3.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>am_util_delay_ms</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, am_util_delay.o(.text.am_util_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_util_delay_ms &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_status_get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>am_util_faultisr_collect_data</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, am_util_faultisr.o(.text.am_util_faultisr_collect_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = am_util_faultisr_collect_data &rArr; am_hal_mcuctrl_info_get &rArr; mcuctrl_fault_status
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_info_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStackedReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2c]"></a>as7341IRQ</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, as7341.o(.text.as7341IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = as7341IRQ &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_stopMeasuring
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_clearInterrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_readRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskhandler.o(.text.initSpecMeasurement)
</UL>
<P><STRONG><a name="[8b]"></a>as7341_clearInterrupt</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, as7341.o(.text.as7341_clearInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = as7341_clearInterrupt &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341IRQ
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_transmitMeasurementsFIFO
</UL>

<P><STRONG><a name="[8c]"></a>as7341_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, as7341.o(.text.as7341_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = as7341_config &rArr; as7341_setInterruptMode &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setIntegrationTime
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setInterruptMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setWaitTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
</UL>

<P><STRONG><a name="[8d]"></a>as7341_enable</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, as7341.o(.text.as7341_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = as7341_enable &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_config
</UL>

<P><STRONG><a name="[98]"></a>as7341_getSpectralGain</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, as7341.o(.text.as7341_getSpectralGain))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
</UL>

<P><STRONG><a name="[8a]"></a>as7341_readRegister</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, as7341.o(.text.as7341_readRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341IRQ
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_transmitMeasurementsFIFO
</UL>

<P><STRONG><a name="[4c]"></a>as7341_setGain</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, as7341.o(.text.as7341_setGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = as7341_setGain &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
</UL>

<P><STRONG><a name="[8e]"></a>as7341_setIntegrationTime</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, as7341.o(.text.as7341_setIntegrationTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = as7341_setIntegrationTime &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_config
</UL>

<P><STRONG><a name="[90]"></a>as7341_setInterruptMode</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, as7341.o(.text.as7341_setInterruptMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = as7341_setInterruptMode &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_config
</UL>

<P><STRONG><a name="[8f]"></a>as7341_setWaitTime</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, as7341.o(.text.as7341_setWaitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = as7341_setWaitTime &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_config
</UL>

<P><STRONG><a name="[4f]"></a>as7341_startMeasurement</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, as7341.o(.text.as7341_startMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = as7341_startMeasurement &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
</UL>

<P><STRONG><a name="[51]"></a>as7341_stopMeasuring</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, as7341.o(.text.as7341_stopMeasuring))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = as7341_stopMeasuring &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341IRQ
</UL>

<P><STRONG><a name="[91]"></a>as7341_testCommunication</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, as7341.o(.text.as7341_testCommunication))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = as7341_testCommunication &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_read
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
</UL>

<P><STRONG><a name="[50]"></a>as7341_transmitMeasurementsFIFO</STRONG> (Thumb, 142 bytes, Stack size 104 bytes, as7341.o(.text.as7341_transmitMeasurementsFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = as7341_transmitMeasurementsFIFO &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_clearInterrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_readRegister
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
</UL>

<P><STRONG><a name="[4d]"></a>as7341_writeSMUXmapping</STRONG> (Thumb, 1030 bytes, Stack size 144 bytes, as7341.o(.text.as7341_writeSMUXmapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = as7341_writeSMUXmapping &rArr; am_device_command_write &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
</UL>

<P><STRONG><a name="[57]"></a>dataPrepare</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dac63002.o(.text.dataPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dataPrepare
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_dac63002_1_set_output
</UL>

<P><STRONG><a name="[92]"></a>device_I2C_init</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, i2c.o(.text.device_I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = device_I2C_init &rArr; am_hal_iom_configure &rArr; iom_get_interface_clock_cfg &rArr; compute_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_configure
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_initialize
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
</UL>

<P><STRONG><a name="[95]"></a>executeSpecMeasurement</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, taskhandler.o(.text.executeSpecMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = executeSpecMeasurement &rArr; SpectrometerMeasurement &rArr; as7341_transmitMeasurementsFIFO &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpectrometerMeasurement
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOffPARLAI
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnPARLAI
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_testCommunication
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_getSpectralGain
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>executeTempMeasurement</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, taskhandler.o(.text.executeTempMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = executeTempMeasurement &rArr; SHTC3_GetTempAndHumi &rArr; SHTC3_ReadBytesAndCrc &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_GetTempAndHumi
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOffTemp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnTemp
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>getStackedReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_util_faultisr.o(.text.getStackedReg))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[9d]"></a>gpioWrite</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(.text.gpioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpioWrite &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOffTemp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnTemp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOffPARLAI
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnPARLAI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnI2C
</UL>

<P><STRONG><a name="[97]"></a>initSpecMeasurement</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, taskhandler.o(.text.initSpecMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = initSpecMeasurement &rArr; device_I2C_init &rArr; am_hal_iom_configure &rArr; iom_get_interface_clock_cfg &rArr; compute_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_register
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>internal_iom_get_int_err</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, am_hal_iom.o(.text.internal_iom_get_int_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = internal_iom_get_int_err
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = main &rArr; executeSpecMeasurement &rArr; SpectrometerMeasurement &rArr; as7341_transmitMeasurementsFIFO &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeTempMeasurement
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_disable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_control
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[44]"></a>timerDelay</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, timing.o(.text.timerDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timerDelay &rArr; am_hal_sysctrl_sleep &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_int_disable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_int_enable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_compare_delta_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_stimer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeTempMeasurement
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_GetTempAndHumi
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_config
</UL>

<P><STRONG><a name="[99]"></a>turnOffPARLAI</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device.o(.text.turnOffPARLAI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = turnOffPARLAI &rArr; gpioWrite &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
</UL>

<P><STRONG><a name="[9c]"></a>turnOffTemp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device.o(.text.turnOffTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = turnOffTemp &rArr; gpioWrite &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeTempMeasurement
</UL>

<P><STRONG><a name="[93]"></a>turnOnI2C</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, device.o(.text.turnOnI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = turnOnI2C &rArr; am_hal_gpio_pinconfig &rArr; pincfg_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_I2C_init
</UL>

<P><STRONG><a name="[96]"></a>turnOnPARLAI</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, device.o(.text.turnOnPARLAI))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = turnOnPARLAI &rArr; am_hal_gpio_pinconfig &rArr; pincfg_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
</UL>

<P><STRONG><a name="[9b]"></a>turnOnTemp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, device.o(.text.turnOnTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = turnOnTemp &rArr; am_hal_gpio_pinconfig &rArr; pincfg_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeTempMeasurement
</UL>

<P><STRONG><a name="[6e]"></a>validate_transaction</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, am_hal_iom.o(.text.validate_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>

<P><STRONG><a name="[33]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[d4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[d5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>set_LPMMODE</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, am_hal_cachectrl.o(.text.set_LPMMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_LPMMODE &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_store_ui32
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
</UL>

<P><STRONG><a name="[5f]"></a>set_SEDELAY</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, am_hal_cachectrl.o(.text.set_SEDELAY))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_SEDELAY &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_store_ui32
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
</UL>

<P><STRONG><a name="[60]"></a>set_RDWAIT</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, am_hal_cachectrl.o(.text.set_RDWAIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_RDWAIT &rArr; am_hal_flash_store_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_store_ui32
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_control
</UL>

<P><STRONG><a name="[66]"></a>pincfg_equ</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, am_hal_gpio.o(.text.pincfg_equ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pincfg_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>

<P><STRONG><a name="[6f]"></a>build_cmd</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, am_hal_iom.o(.text.build_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = build_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>

<P><STRONG><a name="[75]"></a>enable_submodule</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, am_hal_iom.o(.text.enable_submodule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_submodule
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
</UL>

<P><STRONG><a name="[71]"></a>internal_iom_reset_on_error</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, am_hal_iom.o(.text.internal_iom_reset_on_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_blocking_transfer
</UL>

<P><STRONG><a name="[73]"></a>iom_get_interface_clock_cfg</STRONG> (Thumb, 602 bytes, Stack size 96 bytes, am_hal_iom.o(.text.iom_get_interface_clock_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = iom_get_interface_clock_cfg &rArr; compute_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onebit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_configure
</UL>

<P><STRONG><a name="[a1]"></a>compute_freq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, am_hal_iom.o(.text.compute_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = compute_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_get_interface_clock_cfg
</UL>

<P><STRONG><a name="[a2]"></a>onebit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, am_hal_iom.o(.text.onebit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_get_interface_clock_cfg
</UL>

<P><STRONG><a name="[7b]"></a>device_info_get</STRONG> (Thumb, 320 bytes, Stack size 4 bytes, am_hal_mcuctrl.o(.text.device_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = device_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_info_get
</UL>

<P><STRONG><a name="[7c]"></a>mcuctrl_fault_status</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, am_hal_mcuctrl.o(.text.mcuctrl_fault_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcuctrl_fault_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_info_get
</UL>

<P><STRONG><a name="[80]"></a>pwrctrl_periph_disable_msk_check</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, am_hal_pwrctrl.o(.text.pwrctrl_periph_disable_msk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwrctrl_periph_disable_msk_check
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[7f]"></a>simobuck_updates</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, am_hal_pwrctrl.o(.text.simobuck_updates))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = simobuck_updates
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[46]"></a>SHTC3_ReadBytesAndCrc</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, shtc3.o(.text.SHTC3_ReadBytesAndCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SHTC3_ReadBytesAndCrc &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_CheckCrc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_device_command_read
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_GetTempAndHumi
</UL>

<P><STRONG><a name="[47]"></a>SHTC3_CalcTemperature</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, shtc3.o(.text.SHTC3_CalcTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHTC3_CalcTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_GetTempAndHumi
</UL>

<P><STRONG><a name="[48]"></a>SHTC3_CalcHumidity</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, shtc3.o(.text.SHTC3_CalcHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHTC3_CalcHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_GetTempAndHumi
</UL>

<P><STRONG><a name="[4a]"></a>SHTC3_CheckCrc</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, shtc3.o(.text.SHTC3_CheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHTC3_CheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_ReadBytesAndCrc
</UL>

<P><STRONG><a name="[a8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, timing.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[85]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, timing.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_stimer_cmpr5_isr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelay
</UL>

<P><STRONG><a name="[a0]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, taskhandler.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpecMeasurement
</UL>

<P><STRONG><a name="[4b]"></a>SpectrometerMeasurement</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, taskhandler.o(.text.SpectrometerMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SpectrometerMeasurement &rArr; as7341_transmitMeasurementsFIFO &rArr; as7341_readRegister &rArr; am_device_command_read &rArr; am_hal_iom_blocking_transfer &rArr; internal_iom_reset_on_error &rArr; am_hal_flash_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_stopMeasuring
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_setGain
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_transmitMeasurementsFIFO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_startMeasurement
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as7341_writeSMUXmapping
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeSpecMeasurement
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
